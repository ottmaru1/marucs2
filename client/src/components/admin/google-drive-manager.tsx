import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Cloud, Plus, Trash2, Settings, Shield, CheckCircle, XCircle, Key, RefreshCw, RotateCcw, AlertTriangle, Star, Power, PowerOff } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

// Google Drive Account interface
interface GoogleDriveAccount {
  id: string;
  accountName: string;
  email: string;
  isActive: boolean;
  isDefault: boolean;
  profilePicture?: string;
  createdAt: string;
  tokenExpired: boolean;
}

// Add account form schema
const addAccountSchema = z.object({
  accountName: z.string().min(1, "Í≥ÑÏ†ï Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî")
});

type AddAccountForm = z.infer<typeof addAccountSchema>;

export default function GoogleDriveManager() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  
  // State for confirmation dialog
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [pendingAccountChange, setPendingAccountChange] = useState<{id: string, email: string} | null>(null);
  const [syncWarning, setSyncWarning] = useState<any>(null);
  
  // State for account management
  const [pendingAction, setPendingAction] = useState<{ type: 'activate' | 'deactivate' | 'delete', accountId: string, accountName: string } | null>(null);

  // Form setup
  const addForm = useForm<AddAccountForm>({
    resolver: zodResolver(addAccountSchema),
    defaultValues: {
      accountName: ""
    }
  });

  // OAuth ÏôÑÎ£å Î©îÏãúÏßÄ Î¶¨Ïä§ÎÑà - ÌåùÏóÖÏóêÏÑú Î©îÏù∏ Ï∞ΩÏúºÎ°ú ÏôÑÎ£å Ïã†Ìò∏ Î∞õÍ∏∞
  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      if (event.data?.type === 'google-oauth-complete') {
        // OAuth ÏôÑÎ£å Ïãú Í≥ÑÏ†ï Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
        queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
        
        const action = event.data.action;
        const email = event.data.email;
        
        toast({
          title: action === 'added' ? "‚úÖ Í≥ÑÏ†ï Ï∂îÍ∞Ä ÏôÑÎ£å" : "‚úÖ Í≥ÑÏ†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å",
          description: action === 'added' 
            ? `${email} Í≥ÑÏ†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§` 
            : `${email} Í≥ÑÏ†ï ÌÜ†ÌÅ∞Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í∞±Ïã†ÎêòÏóàÏäµÎãàÎã§`,
        });
      }
    };

    window.addEventListener('message', handleMessage);
    
    return () => {
      window.removeEventListener('message', handleMessage);
    };
  }, [queryClient, toast]);

  // Fetch accounts
  const { data: accounts, isLoading } = useQuery({
    queryKey: ["/api/auth/google/accounts"],
    queryFn: async () => {
      const result = await apiRequest("/api/auth/google/accounts");
      // ÎîîÎ≤ÑÍπÖ: Ïã§Ï†ú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ Î°úÍ∑∏
      console.log("üîç Frontend received accounts data:", result);
      if (result && result.length > 0) {
        result.forEach((account: any, index: number) => {
          console.log(`Account ${index + 1}:`, {
            email: account.email,
            tokenExpired: account.tokenExpired,
            typeof_tokenExpired: typeof account.tokenExpired
          });
        });
      }
      return result;
    },
    staleTime: 0, // Ï∫êÏãúÎ•º Ï¶âÏãú staleÎ°ú ÏÑ§Ï†ï
    gcTime: 0, // Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò Ï¶âÏãú Ïã§Ìñâ
  });

  // Add account mutation
  const addAccountMutation = useMutation({
    mutationFn: async (data: AddAccountForm) => {
      const response = await apiRequest("/api/auth/google/authorize", {
        method: "POST",
        body: data,
      });
      return response;
    },
    onSuccess: (data) => {
      window.open(data.authUrl, '_blank', 'width=600,height=600');
      setIsAddDialogOpen(false);
      addForm.reset();
      toast({
        title: "Ïù∏Ï¶ù Ï∞ΩÏù¥ Ïó¥Î†∏ÏäµÎãàÎã§",
        description: "ÏÉà Ï∞ΩÏóêÏÑú Íµ¨Í∏Ä Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî",
      });
      
      setTimeout(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
      }, 3000);
    },
    onError: (error: any) => {
      toast({
        title: "Ïò§Î•ò",
        description: error.message || "Í≥ÑÏ†ï Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§",
        variant: "destructive",
      });
    },
  });

  // Auth account mutation
  const authAccountMutation = useMutation({
    mutationFn: async (accountId: string) => {
      const response = await apiRequest(`/api/auth/google/accounts/${accountId}/reauth`, {
        method: "POST",
      });
      return response;
    },
    onSuccess: (data) => {
      const popup = window.open(data.authUrl, '_blank', 'width=600,height=600');
      
      if (!popup || popup.closed || typeof popup.closed == 'undefined') {
        // ÌåùÏóÖÏù¥ Ï∞®Îã®Îêú Í≤ΩÏö∞
        toast({
          title: "ÌåùÏóÖÏù¥ Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§",
          description: "Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ïÏóêÏÑú ÌåùÏóÖÏùÑ ÌóàÏö©ÌïòÍ±∞ÎÇò ÏïÑÎûò ÎßÅÌÅ¨Î•º ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî",
          variant: "destructive",
        });
        
        // ÏßÅÏ†ë ÎßÅÌÅ¨Î°ú Ïù¥ÎèôÌï† Ïàò ÏûàÎäî ÏòµÏÖò Ï†úÍ≥µ
        const linkElement = document.createElement('a');
        linkElement.href = data.authUrl;
        linkElement.target = '_blank';
        linkElement.rel = 'noopener noreferrer';
        linkElement.click();
      } else {
        toast({
          title: "Ïû¨Ïù∏Ï¶ù Ï∞ΩÏù¥ Ïó¥Î†∏ÏäµÎãàÎã§",
          description: "ÏÉà Ï∞ΩÏóêÏÑú Íµ¨Í∏Ä Í≥ÑÏ†ïÏúºÎ°ú Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî",
        });
      }
      
      setTimeout(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
      }, 3000);
    },
    onError: (error: any) => {
      toast({
        title: "Ïò§Î•ò",
        description: error.message || "Í≥ÑÏ†ï Ïû¨Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§",
        variant: "destructive",
      });
    },
  });

  // Set default account mutation
  const setDefaultMutation = useMutation({
    mutationFn: async ({ accountId, force = false }: { accountId: string, force?: boolean }) => {
      const url = `/api/auth/google/accounts/${accountId}/set-default${force ? '?force=true' : ''}`;
      return await apiRequest(url, {
        method: "PUT",
      });
    },
    onSuccess: (data) => {
      toast({
        title: "Í∏∞Î≥∏ Í≥ÑÏ†ï ÏÑ§Ï†ï ÏôÑÎ£å",
        description: data.forced ? 
          `Í∞ïÏ†úÎ°ú Í∏∞Î≥∏ Í≥ÑÏ†ïÏù¥ ${data.newDefault}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.` :
          `Í∏∞Î≥∏ Í≥ÑÏ†ïÏù¥ ${data.newDefault}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.`,
      });
      setShowConfirmDialog(false);
      setPendingAccountChange(null);
      setSyncWarning(null);
      queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
    },
    onError: (error: any) => {
      if (error.status === 409 && error.needsSync) {
        // ÎèôÍ∏∞Ìôî ÌïÑÏöîÌïú Í≤ΩÏö∞
        setSyncWarning(error);
        setShowConfirmDialog(true);
      } else {
        toast({
          title: "Í∏∞Î≥∏ Í≥ÑÏ†ï ÏÑ§Ï†ï Ïã§Ìå®",
          description: error.message || "Í∏∞Î≥∏ Í≥ÑÏ†ï ÏÑ§Ï†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
          variant: "destructive",
        });
      }
    },
  });

  // Delete account mutation
  const deleteAccountMutation = useMutation({
    mutationFn: async (accountId: string) => {
      return await apiRequest(`/api/auth/google/accounts/${accountId}`, {
        method: "DELETE",
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
      toast({
        title: "ÏÑ±Í≥µ",
        description: "Í≥ÑÏ†ïÏù¥ ÏôÑÏ†ÑÌûà ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Ïò§Î•ò",
        description: error.message || "Í≥ÑÏ†ï ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§",
        variant: "destructive",
      });
    },
  });



  // Synchronize files from default account to others
  const synchronizeFilesMutation = useMutation({
    mutationFn: async () => {
      return await apiRequest("/api/google-drive/synchronize", {
        method: "POST"
      });
    },
    onSuccess: (data) => {
      toast({
        title: "ÌååÏùº ÎèôÍ∏∞Ìôî ÏôÑÎ£å",
        description: `Í∏∞Î≥∏ Í≥ÑÏ†ï ${data.defaultAccount}ÏóêÏÑú ${data.totalSyncedFiles || 0}Í∞ú ÌååÏùºÏù¥ ${data.targetAccountCount || 0}Í∞ú Í≥ÑÏ†ïÏóê ÎèôÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.`,
      });
      queryClient.invalidateQueries({ queryKey: ["/api/downloads"] });
    },
    onError: (error: any) => {
      toast({
        title: "ÌååÏùº ÎèôÍ∏∞Ìôî Ïã§Ìå®",
        description: error.message || "ÌååÏùº ÎèôÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    }
  });

  // Token refresh mutation
  const refreshTokensMutation = useMutation({
    mutationFn: async () => {
      return await apiRequest("/api/google-drive/refresh-tokens", {
        method: "POST"
      });
    },
    onSuccess: (data) => {
      const refreshedCount = data.results?.filter((r: any) => r.status === 'refreshed').length || 0;
      const failedCount = data.results?.filter((r: any) => r.status === 'failed' || r.status === 'error').length || 0;
      
      toast({
        title: "ÌÜ†ÌÅ∞ Í∞±Ïã† ÏôÑÎ£å",
        description: `${refreshedCount}Í∞ú Í≥ÑÏ†ï ÌÜ†ÌÅ∞ Í∞±Ïã† ÏôÑÎ£å${failedCount > 0 ? `, ${failedCount}Í∞ú Í≥ÑÏ†ï Ïã§Ìå®` : ''}`,
        variant: failedCount > 0 ? "destructive" : "default"
      });
      queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
    },
    onError: (error: any) => {
      toast({
        title: "ÌÜ†ÌÅ∞ Í∞±Ïã† Ïã§Ìå®",
        description: error.message || "ÌÜ†ÌÅ∞ Í∞±Ïã† Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    }
  });

  const handleAddAccount = (data: AddAccountForm) => {
    addAccountMutation.mutate(data);
  };

  const handleAuthAccount = (accountId: string) => {
    authAccountMutation.mutate(accountId);
  };

  const handleSetDefault = (accountId: string, email: string) => {
    setPendingAccountChange({ id: accountId, email });
    setDefaultMutation.mutate({ accountId });
  };

  const handleForceChange = () => {
    if (pendingAccountChange) {
      setDefaultMutation.mutate({ accountId: pendingAccountChange.id, force: true });
    }
  };

  const handleSyncFirst = () => {
    setShowConfirmDialog(false);
    synchronizeFilesMutation.mutate();
  };

  // Account activation/deactivation mutations
  const toggleAccountMutation = useMutation({
    mutationFn: async ({ accountId, activate }: { accountId: string, activate: boolean }) => {
      return await apiRequest(`/api/auth/google/accounts/${accountId}/${activate ? 'activate' : 'deactivate'}`, {
        method: "PUT",
      });
    },
    onSuccess: (data, variables) => {
      queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
      toast({
        title: "Í≥ÑÏ†ï ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏôÑÎ£å",
        description: variables.activate ? "Í≥ÑÏ†ïÏù¥ ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§" : "Í≥ÑÏ†ïÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Ïò§Î•ò",
        description: error.message || "Í≥ÑÏ†ï ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§",
        variant: "destructive",
      });
    },
  });

  const handleToggleAccount = (accountId: string, activate: boolean) => {
    toggleAccountMutation.mutate({ accountId, activate });
  };

  const handleDeleteAccount = (accountId: string, accountName: string) => {
    const account = accounts?.find((acc: GoogleDriveAccount) => acc.id === accountId);
    if (account?.isDefault) {
      toast({
        title: "Ïò§Î•ò",
        description: "Í∏∞Î≥∏ Í≥ÑÏ†ïÏùÄ ÏÇ≠Ï†úÌï† Ïàò ÏóÜÏäµÎãàÎã§",
        variant: "destructive",
      });
      return;
    }

    if (confirm(`Í≥ÑÏ†ï "${accountName}"ÏùÑ ÏôÑÏ†ÑÌûà ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.`)) {
      deleteAccountMutation.mutate(accountId);
    }
  };

  const renderAccountStatus = (account: GoogleDriveAccount) => {
    if (!account.isActive) {
      return (
        <div className="flex items-center gap-2">
          <Badge variant="secondary" className="bg-gray-100 text-gray-600 border-gray-300">
            <XCircle className="w-3 h-3 mr-1" />
            ÎπÑÌôúÏÑ±
          </Badge>
        </div>
      );
    }
    if (account.tokenExpired) {
      return (
        <div className="flex items-center gap-2">
          <Badge variant="destructive" className="bg-red-100 text-red-800 border-red-300">
            <XCircle className="w-3 h-3 mr-1" />
            ÌÜ†ÌÅ∞ ÎßåÎ£å
          </Badge>
        </div>
      );
    }
    if (account.isDefault) {
      return (
        <div className="flex items-center gap-2">
          <Badge variant="default" className="bg-blue-100 text-blue-800 border-blue-300">
            <Shield className="w-3 h-3 mr-1" />
            Í∏∞Î≥∏ Í≥ÑÏ†ï
          </Badge>
        </div>
      );
    }
    return (
      <div className="flex items-center gap-2">
        <Badge variant="outline" className="bg-green-50 text-green-700 border-green-300">
          <CheckCircle className="w-3 h-3 mr-1" />
          ÌôúÏÑ±
        </Badge>
      </div>
    );
  };

  if (isLoading) {
    return (
      <Card className="bg-white border border-gray-200 shadow-sm">
        <CardHeader>
          <CardTitle className="text-gray-900 flex items-center gap-2">
            <Cloud className="h-5 w-5" />
            Íµ¨Í∏Ä ÎìúÎùºÏù¥Î∏å Í≥ÑÏ†ï Í¥ÄÎ¶¨
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center text-gray-600">Î°úÎî© Ï§ë...</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header with Actions */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
          <Cloud className="h-5 w-5" />
          Íµ¨Í∏Ä ÎìúÎùºÏù¥Î∏å Í≥ÑÏ†ï Í¥ÄÎ¶¨
        </h3>
        <div className="flex flex-col lg:flex-row gap-2">
          <Button 
            onClick={() => {
              queryClient.invalidateQueries({ queryKey: ["/api/auth/google/accounts"] });
              toast({
                title: "Í≥ÑÏ†ï ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®",
                description: "Í≥ÑÏ†ï Î™©Î°ùÏùÑ Îã§Ïãú Î∂àÎü¨ÏôîÏäµÎãàÎã§",
              });
            }}
            className="bg-green-600 hover:bg-green-700 text-white flex-1 lg:flex-none"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Í≥ÑÏ†ï ÏÉàÎ°úÍ≥†Ïπ®
          </Button>
          <Button 
            onClick={() => refreshTokensMutation.mutate()}
            disabled={refreshTokensMutation.isPending || !accounts?.length}
            className="bg-orange-600 hover:bg-orange-700 text-white flex-1 lg:flex-none"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            {refreshTokensMutation.isPending ? "Í∞±Ïã† Ï§ë..." : "ÌÜ†ÌÅ∞ Í∞±Ïã†"}
          </Button>
          <Button 
            onClick={() => synchronizeFilesMutation.mutate()}
            disabled={synchronizeFilesMutation.isPending || !accounts?.length}
            className="bg-blue-600 hover:bg-blue-700 text-white flex-1 lg:flex-none"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            {synchronizeFilesMutation.isPending ? "ÎèôÍ∏∞Ìôî Ï§ë..." : "ÌååÏùº ÎèôÍ∏∞Ìôî"}
          </Button>
          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-green-600 hover:bg-green-700 text-white flex-1 lg:flex-none">
                <Plus className="w-4 h-4 mr-2" />
                Í≥ÑÏ†ï Ï∂îÍ∞Ä
              </Button>
            </DialogTrigger>
            <DialogContent className="bg-white">
              <DialogHeader>
                <DialogTitle className="text-gray-900">Íµ¨Í∏Ä ÎìúÎùºÏù¥Î∏å Í≥ÑÏ†ï Ï∂îÍ∞Ä</DialogTitle>
                <DialogDescription className="text-gray-600">
                  ÏÉàÎ°úÏö¥ Íµ¨Í∏Ä Í≥ÑÏ†ïÏùÑ Ïó∞Í≤∞ÌïòÏó¨ ÌååÏùº Ïä§ÌÜ†Î¶¨ÏßÄÎ°ú ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.
                </DialogDescription>
              </DialogHeader>
              <Form {...addForm}>
                <form onSubmit={addForm.handleSubmit(handleAddAccount)} className="space-y-4">
                  <FormField
                    control={addForm.control}
                    name="accountName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-gray-700">Í≥ÑÏ†ï Ïù¥Î¶Ñ</FormLabel>
                        <FormControl>
                          <Input
                            {...field}
                            placeholder="Ïòà: Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï, Î∞±ÏóÖ Í≥ÑÏ†ï"
                            className="border-gray-300 focus:border-blue-500"
                          />
                        </FormControl>
                        <FormMessage className="text-red-600" />
                      </FormItem>
                    )}
                  />
                  <div className="flex justify-end gap-2">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => setIsAddDialogOpen(false)}
                      className="border-gray-300 text-gray-700"
                    >
                      Ï∑®ÏÜå
                    </Button>
                    <Button
                      type="submit"
                      disabled={addAccountMutation.isPending}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                    >
                      {addAccountMutation.isPending ? "Ï∂îÍ∞Ä Ï§ë..." : "Í≥ÑÏ†ï Ï∂îÍ∞Ä"}
                    </Button>
                  </div>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Accounts Table */}
      {accounts && accounts.length > 0 && (
        <Card className="bg-white border border-gray-200 shadow-sm min-w-0">
          <CardHeader>
            <CardTitle className="text-gray-900 text-sm">Ïó∞Í≤∞Îêú Í≥ÑÏ†ï</CardTitle>
          </CardHeader>
          <CardContent>
            {/* Mobile Card View */}
            <div className="block lg:hidden space-y-4">
              {accounts.map((account: GoogleDriveAccount) => (
                <Card key={account.id} className="bg-gray-50 border border-gray-200">
                  <CardContent className="p-4">
                    <div className="space-y-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1 min-w-0">
                          <h4 className="font-medium text-gray-900 truncate">{account.accountName}</h4>
                          <p className="text-sm text-gray-600 truncate">{account.email || "Ïù∏Ï¶ù ÌïÑÏöî"}</p>
                          <div className="mt-2">
                            {renderAccountStatus(account)}
                          </div>
                        </div>
                        <div className="flex gap-1 ml-2">
                          {!account.isActive && (
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleAuthAccount(account.id)}
                              disabled={authAccountMutation.isPending}
                              className="text-blue-600 border-blue-300 hover:bg-blue-50 px-2 py-1 h-7"
                              title="Í≥ÑÏ†ï Ïù∏Ï¶ù"
                            >
                              <Key className="w-3 h-3" />
                            </Button>
                          )}
                          {account.tokenExpired && (
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleAuthAccount(account.id)}
                              disabled={authAccountMutation.isPending}
                              className="text-orange-600 border-orange-300 hover:bg-orange-50 px-2 py-1 h-7"
                              title="ÌÜ†ÌÅ∞ Í∞±Ïã†"
                            >
                              <RefreshCw className="w-3 h-3" />
                            </Button>
                          )}
                          
                          {/* ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥ */}
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button
                                size="sm"
                                variant="outline"
                                className="text-gray-600 border-gray-300 hover:bg-gray-50 px-2 py-1 h-7"
                                title="Í≥ÑÏ†ï Í¥ÄÎ¶¨"
                              >
                                <Settings className="w-3 h-3" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              {/* Mobile dropdown content will be same as desktop */}
                              {account.tokenExpired && (
                                <DropdownMenuItem
                                  onClick={() => handleAuthAccount(account.id)}
                                  disabled={authAccountMutation.isPending}
                                  className="text-orange-600 hover:bg-orange-50"
                                >
                                  <Key className="w-4 h-4 mr-2" />
                                  ÌÜ†ÌÅ∞ Ïû¨Ïù∏Ï¶ù
                                </DropdownMenuItem>
                              )}
                              
                              {account.isActive ? (
                                <DropdownMenuItem
                                  onClick={() => setPendingAction({ type: 'deactivate', accountId: account.id, accountName: account.accountName })}
                                  className="text-orange-600 hover:bg-orange-50"
                                >
                                  <PowerOff className="w-4 h-4 mr-2" />
                                  ÎπÑÌôúÏÑ±Ìôî
                                </DropdownMenuItem>
                              ) : (
                                <DropdownMenuItem
                                  onClick={() => setPendingAction({ type: 'activate', accountId: account.id, accountName: account.accountName })}
                                  className="text-green-600 hover:bg-green-50"
                                >
                                  <Power className="w-4 h-4 mr-2" />
                                  ÌôúÏÑ±Ìôî
                                </DropdownMenuItem>
                              )}
                              
                              {!account.isDefault && (
                                <>
                                  <DropdownMenuSeparator />
                                  <DropdownMenuItem
                                    onClick={() => setPendingAction({ type: 'delete', accountId: account.id, accountName: account.accountName })}
                                    className="text-red-600 hover:bg-red-50"
                                  >
                                    <Trash2 className="w-4 h-4 mr-2" />
                                    Í≥ÑÏ†ï ÏÇ≠Ï†ú
                                  </DropdownMenuItem>
                                </>
                              )}
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Desktop Table View */}
            <div className="hidden lg:block">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="text-gray-700">Í≥ÑÏ†ïÎ™Ö</TableHead>
                    <TableHead className="text-gray-700">Ïù¥Î©îÏùº</TableHead>
                    <TableHead className="text-gray-700">ÏÉÅÌÉú</TableHead>
                    <TableHead className="text-gray-700 text-right">ÏûëÏóÖ</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {accounts.map((account: GoogleDriveAccount) => (
                    <TableRow key={account.id}>
                      <TableCell className="text-gray-900 font-medium">
                        {account.accountName}
                      </TableCell>
                      <TableCell className="text-gray-600">
                        {account.email || "Ïù∏Ï¶ù ÌïÑÏöî"}
                      </TableCell>
                      <TableCell>
                        {renderAccountStatus(account)}
                      </TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end gap-1">
                          {!account.isActive && (
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleAuthAccount(account.id)}
                              disabled={authAccountMutation.isPending}
                              className="text-blue-600 border-blue-300 hover:bg-blue-50 px-2 py-1 h-7"
                              title="Í≥ÑÏ†ï Ïù∏Ï¶ù"
                            >
                              <Key className="w-3 h-3" />
                            </Button>
                          )}
                          {account.tokenExpired && (
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleAuthAccount(account.id)}
                              disabled={authAccountMutation.isPending}
                              className="text-orange-600 border-orange-300 hover:bg-orange-50 px-2 py-1 h-7"
                              title="ÌÜ†ÌÅ∞ Í∞±Ïã†"
                            >
                              <RefreshCw className="w-3 h-3" />
                            </Button>
                          )}
                          
                          {/* ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥ */}
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button
                                size="sm"
                                variant="outline"
                                className="text-gray-600 border-gray-300 hover:bg-gray-50 px-2 py-1 h-7"
                                title="Í≥ÑÏ†ï Í¥ÄÎ¶¨"
                              >
                                <Settings className="w-3 h-3" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                            {/* ÌÜ†ÌÅ∞ Ïû¨Ïù∏Ï¶ù Î©îÎâ¥ */}
                            {(account.tokenExpired || !account.isActive) && (
                              <>
                                <DropdownMenuItem
                                  onClick={() => handleAuthAccount(account.id)}
                                  disabled={authAccountMutation.isPending}
                                  className="text-blue-600"
                                >
                                  <RefreshCw className="w-4 h-4 mr-2" />
                                  {account.tokenExpired ? "ÌÜ†ÌÅ∞ Í∞±Ïã†" : "Í≥ÑÏ†ï Ïû¨Ïù∏Ï¶ù"}
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                              </>
                            )}
                            
                            {account.isActive && !account.isDefault && (
                              <>
                                <DropdownMenuItem
                                  onClick={() => handleSetDefault(account.id, account.email)}
                                  disabled={setDefaultMutation.isPending}
                                  className="text-green-600"
                                >
                                  <Star className="w-4 h-4 mr-2" />
                                  Í∏∞Î≥∏ Í≥ÑÏ†ïÏúºÎ°ú ÏÑ§Ï†ï
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                              </>
                            )}
                            
                            {account.isActive ? (
                              <DropdownMenuItem
                                onClick={() => handleToggleAccount(account.id, false)}
                                disabled={toggleAccountMutation.isPending || account.isDefault}
                                className="text-orange-600"
                              >
                                <PowerOff className="w-4 h-4 mr-2" />
                                Í≥ÑÏ†ï ÎπÑÌôúÏÑ±Ìôî
                              </DropdownMenuItem>
                            ) : (
                              <DropdownMenuItem
                                onClick={() => handleToggleAccount(account.id, true)}
                                disabled={toggleAccountMutation.isPending}
                                className="text-green-600"
                              >
                                <Power className="w-4 h-4 mr-2" />
                                Í≥ÑÏ†ï ÌôúÏÑ±Ìôî
                              </DropdownMenuItem>
                            )}
                            
                            <DropdownMenuSeparator />
                            <DropdownMenuItem
                              onClick={() => handleDeleteAccount(account.id, account.accountName)}
                              disabled={deleteAccountMutation.isPending || account.isDefault}
                              className="text-red-600"
                            >
                              <Trash2 className="w-4 h-4 mr-2" />
                              Í≥ÑÏ†ï ÏÇ≠Ï†ú
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Setup Guide */}
      <Card className="bg-blue-50 border border-blue-200 shadow-sm">
        <CardHeader>
          <CardTitle className="text-blue-900 flex items-center gap-2 text-sm">
            <Settings className="h-4 w-4" />
            Íµ¨Í∏Ä ÌÅ¥ÎùºÏö∞Îìú ÏΩòÏÜî ÏÑ§Ï†ï Í∞ÄÏù¥Îìú
          </CardTitle>
          <div className="space-y-4 text-sm">
            <div className="space-y-3">
              <div className="border-l-4 border-blue-400 pl-3 bg-blue-100">
                <p className="font-semibold text-blue-800 mb-1">1. Google Cloud Console Ï†ëÏÜç</p>
                <p>‚Ä¢ <a href="https://console.cloud.google.com/" target="_blank" rel="noopener noreferrer" className="text-blue-700 underline">Google Cloud Console</a>Ïóê Ï†ëÏÜçÌïòÏó¨ ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±</p>
              </div>

              <div className="border-l-4 border-green-400 pl-3 bg-green-50">
                <p className="font-semibold text-green-800 mb-1">2. Google Drive API ÌôúÏÑ±Ìôî</p>
                <p>‚Ä¢ API Î∞è ÏÑúÎπÑÏä§ ‚Üí ÎùºÏù¥Î∏åÎü¨Î¶¨ ‚Üí "Google Drive API" Í≤ÄÏÉâ ÌõÑ ÏÇ¨Ïö© ÏÑ§Ï†ï</p>
              </div>

              <div className="border-l-4 border-yellow-400 pl-3 bg-yellow-50">
                <p className="font-semibold text-yellow-800 mb-1">3. OAuth ÎèôÏùò ÌôîÎ©¥ Íµ¨ÏÑ±</p>
                <p>‚Ä¢ API Î∞è ÏÑúÎπÑÏä§ ‚Üí OAuth ÎèôÏùò ÌôîÎ©¥ ‚Üí Ïô∏Î∂Ä ÏÑ†ÌÉù ‚Üí Ïï± Ï†ïÎ≥¥ ÏûÖÎ†•</p>
              </div>

              <div className="border-l-4 border-purple-400 pl-3 bg-purple-50">
                <p className="font-semibold text-purple-800 mb-1">4. OAuth ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID ÏÉùÏÑ±</p>
                <p>‚Ä¢ API Î∞è ÏÑúÎπÑÏä§ ‚Üí ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥ ‚Üí ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥ ÎßåÎì§Í∏∞ ‚Üí OAuth ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID</p>
                <p>‚Ä¢ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïú†Ìòï: Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò</p>
                <div className="mt-2 space-y-2">
                  <div>
                    <p className="font-medium text-purple-700">ÏäπÏù∏Îêú ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ ÏõêÎ≥∏:</p>
                    <div className="flex items-center gap-2 mt-1">
                      <code className="bg-purple-100 px-2 py-1 rounded text-xs text-purple-800 flex-1">
                        https://258c0df6-4caa-4bc6-ad62-93cc7a44effb-00-2dmqihs3x26jc.spock.replit.dev
                      </code>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          navigator.clipboard.writeText('https://258c0df6-4caa-4bc6-ad62-93cc7a44effb-00-2dmqihs3x26jc.spock.replit.dev');
                          toast({ title: "Î≥µÏÇ¨Îê®", description: "ÏõêÎ≥∏ URLÏù¥ ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§" });
                        }}
                        className="px-2 py-1 h-6 text-xs"
                      >
                        Î≥µÏÇ¨
                      </Button>
                    </div>
                  </div>
                  <div>
                    <p className="font-medium text-purple-700">ÏäπÏù∏Îêú Î¶¨ÎîîÎ†âÏÖò URI:</p>
                    <div className="flex items-center gap-2 mt-1">
                      <code className="bg-purple-100 px-2 py-1 rounded text-xs text-purple-800 flex-1">
                        https://258c0df6-4caa-4bc6-ad62-93cc7a44effb-00-2dmqihs3x26jc.spock.replit.dev/api/auth/google/callback
                      </code>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          navigator.clipboard.writeText('https://258c0df6-4caa-4bc6-ad62-93cc7a44effb-00-2dmqihs3x26jc.spock.replit.dev/api/auth/google/callback');
                          toast({ title: "Î≥µÏÇ¨Îê®", description: "Î¶¨ÎîîÎ†âÏÖò URIÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§" });
                        }}
                        className="px-2 py-1 h-6 text-xs"
                      >
                        Î≥µÏÇ¨
                      </Button>
                    </div>
                  </div>
                </div>
                <p className="text-red-700 mt-2">‚Ä¢ Î≥µÏÇ¨ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Í∞Å URLÏùÑ Google Cloud ConsoleÏùò Ìï¥Îãπ ÌïÑÎìúÏóê Î∂ôÏó¨ÎÑ£Í∏∞</p>
              </div>

              <div className="border-l-4 border-green-400 pl-3 bg-green-50">
                <p className="font-semibold text-green-800 mb-1">5. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï</p>
                <p>‚Ä¢ ÏÉùÏÑ±Îêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ IDÏôÄ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î≥¥Ïïà ÎπÑÎ∞ÄÏùÑ Replit SecretsÏóê Îì±Î°ù</p>
                <p>‚Ä¢ GOOGLE_CLIENT_ID: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID</p>
                <p>‚Ä¢ GOOGLE_CLIENT_SECRET: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î≥¥Ïïà ÎπÑÎ∞Ä</p>
              </div>

              <div className="mt-3 p-3 bg-blue-100 rounded">
                <p className="text-sm text-blue-800 font-semibold mb-1">üí° Ï§ëÏöî ÏïàÎÇ¥:</p>
                <p className="text-xs text-blue-700">
                  ‚Ä¢ ÌôòÍ≤ΩÎ≥ÄÏàòÎäî <strong>Ìïú Î≤àÎßå</strong> ÏÑ§Ï†ïÌïòÎ©¥ Îê©ÎãàÎã§<br/>
                  ‚Ä¢ Ï∂îÍ∞Ä Google Í≥ÑÏ†ïÏùÄ Í∞ôÏùÄ OAuth ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î•º ÏÇ¨Ïö©Ìï¥ÏÑú 'Í≥ÑÏ†ï Ï∂îÍ∞Ä' Î≤ÑÌäºÏúºÎ°ú Ïó∞Í≤∞<br/>
                  ‚Ä¢ Í≥ÑÏ†ïÎ≥ÑÎ°ú ÏÉàÎ°úÏö¥ ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÎßåÎì§ ÌïÑÏöî ÏóÜÏùå
                </p>
              </div>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Confirmation Dialog for Account Change */}
      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-amber-500" />
              <AlertDialogTitle>Í∏∞Î≥∏ Í≥ÑÏ†ï Î≥ÄÍ≤Ω ÌôïÏù∏</AlertDialogTitle>
            </div>
            <AlertDialogDescription className="space-y-3">
              {syncWarning && (
                <>
                  <p className="text-gray-700">
                    {syncWarning.message}
                  </p>
                  <div className="bg-amber-50 border border-amber-200 rounded-lg p-3">
                    <p className="text-sm text-amber-800">
                      <strong>Í∂åÏû•:</strong> Î®ºÏ†Ä ÌååÏùº ÎèôÍ∏∞ÌôîÎ•º Ïã§ÌñâÌïòÏó¨ Î™®Îì† Í≥ÑÏ†ïÏóê ÌååÏùºÏùÑ Î≥µÏÇ¨Ìïú ÌõÑ Í∏∞Î≥∏ Í≥ÑÏ†ïÏùÑ Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî.
                    </p>
                  </div>
                  <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                    <p className="text-sm text-red-800">
                      <strong>Ï£ºÏùò:</strong> Í∞ïÏ†ú Î≥ÄÍ≤Ω Ïãú Í∏∞Ï°¥ Í∏∞Î≥∏ Í≥ÑÏ†ïÏùò ÌååÏùºÎì§Ïù¥ Îã§Î•∏ Í≥ÑÏ†ïÏóê ÎèôÍ∏∞ÌôîÎêòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏäµÎãàÎã§.
                    </p>
                  </div>
                </>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="flex gap-2">
            <AlertDialogCancel>Ï∑®ÏÜå</AlertDialogCancel>
            {syncWarning && (
              <>
                <AlertDialogAction
                  onClick={handleSyncFirst}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  Î®ºÏ†Ä ÎèôÍ∏∞Ìôî Ïã§Ìñâ
                </AlertDialogAction>
                <AlertDialogAction
                  onClick={handleForceChange}
                  className="bg-red-600 hover:bg-red-700"
                >
                  Í∞ïÏ†ú Î≥ÄÍ≤Ω
                </AlertDialogAction>
              </>
            )}
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}